{"version":3,"sources":["www/browser/src/main.browser.ts","../../src/http/http-event.ts","../../src/http/http-headers.ts","../../src/http/http-error-response.ts","../../src/http/http-response.ts","../../src/http/http-fetch.handler.ts","../../src/http/http-interceptor.ts","../../src/http.module.ts","../../src/http/http-params.ts","../../src/http/http-request.ts","../../src/http/http.service.ts","../../www/browser/src/app.component.ts","../../www/browser/src/http/custom.interceptor.ts","../../www/browser/src/app.module.ts","../../www/browser/src/main.browser.ts"],"names":["rxcomp","rxjs","operators","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_inheritsLoose","subClass","superClass","prototype","create","constructor","__proto__","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","_setPrototypeOf","p","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","toString","call","e","_construct","Parent","args","Class","a","push","apply","instance","Function","bind","arguments","_wrapNativeSuper","_cache","Map","undefined","fn","indexOf","TypeError","has","get","set","Wrapper","this","value","HttpEventType","HttpHeaders","options","_this","headers_","headers","forEach","split","keys","values","append","line","index","slice","trim","_proto","join","clone","clone_","callback","thisArg","_this2","v","k","serialize","toObject","HttpErrorResponse","_Error","message","status","statusText","ok","type","ResponseError","name","url","error","request","assign","Error","HttpResponse","Response","body","_proto2","response","HttpFetchHandler","response_","handle","method","requestInfo","urlWithParams","requestInit","toInitRequest","stateKey","TransferService","makeKey","transferKey","isPlatformBrowser","hydrate","transfer","remove","of","from","fetch","then","getProgress","getResponse","pipe","tap","isPlatformServer","catchError","errorResponse","httpErrorResponse","nextError$","next","finalize","clonedBody","reportProgress","reader","getReader","contentLength","Promise","resolve","reject","progress","percent","current","total","read","_ref2","onProgress","done","receivedLength","closed","_ref","responseType","json","err","console","log","getResponseType","_this3","getReadableStream","ReadableStream","start","controller","_ref3","close","enqueue","HttpInterceptorHandler","interceptor","req","intercept","HttpInterceptors","fetchHandler","HttpInterceptingHandler","chain","interceptors","reduceRight","factories","pipes","HttpModule","_Module","useInterceptors","interceptorFactories","map","x","Module","declarations","concat","exports","HttpUrlEncodingCodec","encodeKey","encodeParam_","encodeValue","decodeKey","decodeURIComponent","decodeValue","HttpParams","encoder","params_","params","Array","isArray","queryString","keyValue","parseRawParams_","getAll","filter","encodeURIComponent","replace","HttpRequest","third","fourth","withCredentials","observe","isStaticFile","test","toUpperCase","methodHasBody_","sep","Constructor","protoProps","staticProps","serializeBody","isArrayBuffer_","isBlob_","isFormData_","JSON","stringify","detectContentTypeHeader","mode","credentials","cache","redirect","toFetchRequest__","Request","pathname","getLocationComponents","paramsKey","optionsToKey","bodyKey","ArrayBuffer","Blob","FormData","HttpService","incrementPendingRequest","pendingRequests$","getValue","decrementPendingRequest","request$","first","events$","concatMap","handler","throwError","getError","event","delete$","get$","head$","jsonp$","callbackParam","options$","patch$","optionsWithBody_","post$","put$","statusCode","statusMessage","BehaviorSubject","AppComponent","_Component","items","onInit","getContext","node","classList","add","subscribe","data","getTodos","pushChanges","errors$","takeUntil","unsubscribe$","onClick","item","completed","Component","selector","CustomInterceptor","clonedRequest","AppModule","imports","CoreModule","bootstrap","Browser"],"mappings":"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","file":"docs\\js\\main.min.js","sourcesContent":[null,"export enum HttpEventType {\r\n\tSent,\r\n\tUploadProgress,\r\n\tResponseHeader,\r\n\tDownloadProgress,\r\n\tResponse,\r\n\tUser,\r\n\tResponseError,\r\n}\r\n\r\nexport interface HttpProgressEvent {\r\n\ttype: HttpEventType.DownloadProgress | HttpEventType.UploadProgress;\r\n\tloaded: number;\r\n\ttotal?: number;\r\n}\r\n\r\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\r\n\ttype: HttpEventType.DownloadProgress;\r\n\tpartialText?: string;\r\n}\r\n\r\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\r\n\ttype: HttpEventType.UploadProgress;\r\n}\r\n\r\nexport interface HttpSentEvent {\r\n\ttype: HttpEventType.Sent;\r\n}\r\n\r\nexport interface HttpUserEvent<T> {\r\n\ttype: HttpEventType.User;\r\n}\r\n","\r\nexport type IHttpHeaders = string | { [name: string]: string | string[] };\r\n\r\nexport class HttpHeaders implements Headers {\r\n\tprivate headers_: Map<string, string[]> = new Map<string, string[]>();\r\n\r\n\tconstructor(options?: HttpHeaders | Headers | { [key: string]: string | string[] } | string | undefined) {\r\n\t\tconst headers = this.headers_;\r\n\t\tif (options instanceof HttpHeaders) {\r\n\t\t\toptions.headers_.forEach((value, key) => {\r\n\t\t\t\theaders.set(key, value);\r\n\t\t\t});\r\n\t\t} else if (typeof (options as Headers)?.forEach === 'function') {\r\n\t\t\t(options as Headers).forEach((value, key) => {\r\n\t\t\t\theaders.set(key, value.split(', '));\r\n\t\t\t});\r\n\t\t} else if (typeof options === 'object') {\r\n\t\t\tObject.keys(options).forEach(key => {\r\n\t\t\t\tlet values: string | string[] = (options as any)[key];\r\n\t\t\t\tif (typeof values === 'string') {\r\n\t\t\t\t\tvalues = [values];\r\n\t\t\t\t}\r\n\t\t\t\tif (headers.has(key)) {\r\n\t\t\t\t\tvalues.forEach(value => this.append(key, value));\r\n\t\t\t\t} else {\r\n\t\t\t\t\theaders.set(key, values);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else if (typeof options === 'string') {\r\n\t\t\toptions.split('\\n').forEach(line => {\r\n\t\t\t\tconst index = line.indexOf(':');\r\n\t\t\t\tif (index > 0) {\r\n\t\t\t\t\tconst key = line.slice(0, index);;\r\n\t\t\t\t\tconst value = line.slice(index + 1).trim();\r\n\t\t\t\t\tif (headers.has(key)) {\r\n\t\t\t\t\t\tthis.append(key, value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\theaders.set(key, [value]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (!headers.has('Accept')) {\r\n\t\t\theaders.set('Accept', ['application/json', 'text/plain', '*/*']);\r\n\t\t}\r\n\t\tif (!headers.has('Content-Type')) {\r\n\t\t\theaders.set('Content-Type', ['application/json']);\r\n\t\t}\r\n\t}\r\n\r\n\thas(key: string): boolean {\r\n\t\treturn this.headers_.has(key);\r\n\t}\r\n\r\n\tget(key: string): string | null {\r\n\t\tconst values = this.headers_.get(key);\r\n\t\treturn values ? values.join(', ') : null;\r\n\t}\r\n\r\n\tset(key: string, value: string): HttpHeaders {\r\n\t\tconst clone = this.clone_();\r\n\t\tclone.headers_.set(key, value.split(', '));\r\n\t\treturn clone;\r\n\t}\r\n\r\n\tappend(key: string, value: string): HttpHeaders {\r\n\t\tconst clone = this.clone_();\r\n\t\tconst values: string[] = clone.headers_.has(key) ? clone.headers_.get(key) || [] : [];\r\n\t\tvalues.push(value);\r\n\t\tclone.headers_.set(key, values);\r\n\t\treturn clone;\r\n\t}\r\n\r\n\tdelete(key: string): HttpHeaders {\r\n\t\tconst clone = this.clone_();\r\n\t\tclone.headers_.delete(key);\r\n\t\treturn clone;\r\n\t}\r\n\r\n\tforEach(callback: (value: string, key: string, parent: Headers) => void, thisArg?: any): void {\r\n\t\tthis.headers_.forEach((v, k) => {\r\n\t\t\tcallback(v.join(', '), k, this);\r\n\t\t});\r\n\t}\r\n\r\n\tserialize(): Headers | string[][] | Record<string, string> | undefined {\r\n\t\tconst headers: string[][] = [];\r\n\t\tthis.forEach((value, key) => {\r\n\t\t\theaders.push([key, value]);\r\n\t\t});\r\n\t\treturn headers;\r\n\t}\r\n\r\n\ttoObject(): { [key: string]: string } {\r\n\t\tconst headers: { [key: string]: string } = {};\r\n\t\tthis.forEach((value, key) => {\r\n\t\t\theaders[key] = value;\r\n\t\t});\r\n\t\treturn headers;\r\n\t}\r\n\r\n\tprivate clone_(): HttpHeaders {\r\n\t\tconst clone = new HttpHeaders();\r\n\t\tthis.headers_.forEach((value, key) => {\r\n\t\t\tclone.headers_.set(key, value);\r\n\t\t});\r\n\t\treturn clone;\r\n\t}\r\n\r\n}\r\n","import { HttpEventType } from './http-event';\r\nimport { HttpHeaders } from './http-headers';\r\nimport { HttpRequest } from './http-request';\r\nimport { IHttpHeaderResponse } from './http-response';\r\n\r\nexport interface IHttpJsonParseError {\r\n\terror: Error;\r\n\ttext: string;\r\n}\r\n\r\nexport interface IHttpErrorResponse<T> extends IHttpHeaderResponse<T> {\r\n\terror?: any | undefined;\r\n\tmessage?: string;\r\n\tname?: string;\r\n\trequest?: HttpRequest<T> | null;\r\n}\r\n\r\nexport class HttpErrorResponse<T> extends Error implements IHttpErrorResponse<T> {\r\n\treadonly headers!: HttpHeaders;\r\n\treadonly status: number = 0;\r\n\treadonly statusText: string = 'Unknown Error';\r\n\treadonly url: string | undefined;\r\n\treadonly ok: boolean = false;\r\n\treadonly type: HttpEventType.ResponseError = HttpEventType.ResponseError;\r\n\treadonly error: any | undefined;\r\n\treadonly message: string = 'Unknown Error';\r\n\treadonly name: string = 'HttpErrorResponse';\r\n\treadonly request!: HttpRequest<T> | null;\r\n\tconstructor(options?: IHttpErrorResponse<T>) {\r\n\t\tsuper(options?.message || 'Unknown Error');\r\n\t\tif (options) {\r\n\t\t\tthis.headers = new HttpHeaders(options.headers);\r\n\t\t\tthis.status = options.status || this.status;\r\n\t\t\tthis.statusText = options.statusText || this.statusText;\r\n\t\t\tthis.url = options.url || this.url;\r\n\t\t\tthis.error = options.error || this.error;\r\n\t\t\tthis.name = options.name || this.name;\r\n\t\t\tthis.request = options.request || null;\r\n\t\t}\r\n\t}\r\n\tclone<T>(options?: IHttpErrorResponse<T>): HttpErrorResponse<T> {\r\n\t\toptions = Object.assign({\r\n\t\t\theaders: this.headers,\r\n\t\t\tstatus: this.status,\r\n\t\t\tstatusText: this.statusText,\r\n\t\t\turl: this.url,\r\n\t\t\terror: this.error,\r\n\t\t\tmessage: this.message,\r\n\t\t\tname: this.name,\r\n\t\t\trequest: this.request,\r\n\t\t}, options || {});\r\n\t\tconst clone = new HttpErrorResponse<T>(options);\r\n\t\treturn clone;\r\n\t}\r\n}\r\n","import { HttpEventType, HttpProgressEvent, HttpSentEvent, HttpUserEvent } from './http-event';\nimport { HttpHeaders } from './http-headers';\nimport { HttpBodyType } from './http-request';\n\nexport type HttpEvent<T> = HttpSentEvent | HttpHeaderResponse<T> | HttpResponse<T> | HttpProgressEvent | HttpUserEvent<T>;\n\nexport interface IHttpHeaderResponse<T> {\n\theaders?: HttpHeaders,\n\tstatus?: number,\n\tstatusText?: string,\n\turl?: string,\n\tok?: boolean;\n\ttype?: HttpEventType;\n}\n\nexport interface IHttpResponse<T> extends IHttpHeaderResponse<T> {\n\tbody?: HttpBodyType<T>;\n}\n\nexport class HttpHeaderResponse<T> implements IHttpHeaderResponse<T> {\n\treadonly headers!: HttpHeaders;\n\treadonly status: number = 200;\n\treadonly statusText: string = 'OK';\n\treadonly url: string | undefined;\n\treadonly ok: boolean;\n\treadonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\tconstructor(options?: IHttpHeaderResponse<T>) {\n\t\tif (options) {\n\t\t\tthis.headers = new HttpHeaders(options.headers);\n\t\t\tthis.status = options.status || this.status;\n\t\t\tthis.statusText = options.statusText || this.statusText;\n\t\t\tthis.url = options.url || this.url;\n\t\t}\n\t\tthis.ok = this.status >= 200 && this.status < 300;\n\t}\n\tclone<T>(options?: IHttpHeaderResponse<T>): HttpHeaderResponse<T> {\n\t\toptions = Object.assign({\n\t\t\theaders: this.headers,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\turl: this.url,\n\t\t\tok: this.ok,\n\t\t\ttype: this.type,\n\t\t}, options || {});\n\t\tconst clone = new HttpHeaderResponse<T>(options);\n\t\treturn clone;\n\t}\n}\n\nexport class HttpResponse<T> implements IHttpResponse<T> {\n\treadonly headers!: HttpHeaders;\n\treadonly status: number = 200;\n\treadonly statusText: string = 'OK';\n\treadonly url: string | undefined;\n\treadonly ok: boolean;\n\treadonly type: HttpEventType.Response = HttpEventType.Response;\n\treadonly body: HttpBodyType<T> = null;\n\tconstructor(options?: IHttpResponse<T>) {\n\t\tif (options) {\n\t\t\tthis.headers = new HttpHeaders(options.headers);\n\t\t\tthis.status = options.status || this.status;\n\t\t\tthis.statusText = options.statusText || this.statusText;\n\t\t\tthis.url = options.url || this.url;\n\t\t\tthis.body = options.body || this.body;\n\t\t}\n\t\tthis.ok = this.status >= 200 && this.status < 300;\n\t}\n\tclone<T>(options?: IHttpResponse<T>): HttpResponse<T> {\n\t\toptions = Object.assign({\n\t\t\theaders: this.headers,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\turl: this.url,\n\t\t\tok: this.ok,\n\t\t\ttype: this.type,\n\t\t\tbody: this.body,\n\t\t}, options || {});\n\t\tconst clone = new HttpResponse<T>(options);\n\t\treturn clone;\n\t}\n\ttoObject(): { [key: string]: any } {\n\t\tconst response: { [key: string]: any } = {};\n\t\tresponse.url = this.url;\n\t\tresponse.headers = this.headers.toObject();\n\t\tresponse.status = this.status;\n\t\tresponse.statusText = this.statusText;\n\t\tresponse.ok = this.ok;\n\t\tresponse.type = this.type;\n\t\tresponse.body = this.body;\n\t\treturn response;\n\t}\n}\n\nexport abstract class HttpResponseBase<T> {\n\treadonly headers: HttpHeaders;\n\treadonly status: number = 200;\n\treadonly statusText: string = 'OK';\n\treadonly url: string | undefined;\n\treadonly ok: boolean;\n\treadonly type!: HttpEventType.Response | HttpEventType.ResponseHeader;\n\tconstructor(\n\t\toptions: IHttpHeaderResponse<T>,\n\t\tdefaultStatus: number = 200,\n\t\tdefaultStatusText: string = 'OK'\n\t) {\n\t\tthis.headers = options.headers || new HttpHeaders();\n\t\tthis.status = options.status !== undefined ? options.status : defaultStatus;\n\t\tthis.statusText = options.statusText || defaultStatusText;\n\t\tthis.url = options.url || undefined;\n\t\tthis.ok = this.status >= 200 && this.status < 300;\n\t}\n}\n\n/*\n// !!!\nexport default class HttpResponse {\n\tdata?: any;\n\turl: string = '';\n\tstatus: number = 0;\n\tstatusText: string = '';\n\tok: boolean = false;\n\tredirected: boolean = false;\n\tget static() {\n\t\treturn this.url!.indexOf('.json') === this.url!.length - 5;\n\t}\n\tconstructor(response: Response) {\n\t\tthis.data = null;\n\t\tif (response) {\n\t\t\tthis.url = response.url;\n\t\t\tthis.status = response.status;\n\t\t\tthis.statusText = response.statusText;\n\t\t\tthis.ok = response.ok;\n\t\t\tthis.redirected = response.redirected;\n\t\t}\n\t}\n}\n*/\n","import { isPlatformBrowser, isPlatformServer, nextError$, TransferService } from 'rxcomp';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { catchError, finalize, tap } from 'rxjs/operators';\r\nimport { HttpErrorResponse, IHttpErrorResponse } from './http-error-response';\r\nimport { HttpHandler } from './http-handler';\r\nimport { HttpRequest } from './http-request';\r\nimport { HttpEvent, HttpResponse, IHttpResponse } from './http-response';\r\n\r\nexport class HttpFetchHandler implements HttpHandler {\r\n\r\n\tprivate response_: HttpResponse<any> | null = null;\r\n\r\n\thandle<T>(request: HttpRequest<any>): Observable<HttpEvent<T>> {\r\n\t\tif (!request.method) {\r\n\t\t\tthrow new Error(`missing method`);\r\n\t\t}\r\n\t\tconst requestInfo: RequestInfo = request.urlWithParams;\r\n\t\tconst requestInit: RequestInit = request.toInitRequest();\r\n\t\t// console.log('fetchRequest', fetchRequest);\r\n\t\t// fetchRequest.headers.forEach((value, key) => console.log('HttpFetchHandler.handle', key, value));\r\n\t\t// request = request.clone({ headers: fetchRequest.headers });\r\n\t\t// console.log('HttpFetchHandler.handle', 'requestInfo', requestInfo, 'requestInit', requestInit);\r\n\t\t// hydrate\r\n\t\tconst stateKey = TransferService.makeKey(request.transferKey);\r\n\t\t// console.log('HttpFetchHandler.get', 'stateKey', stateKey, 'isPlatformBrowser', isPlatformBrowser, 'hydrate', request.hydrate);\r\n\t\tlet response: HttpResponse<T> | undefined;\r\n\t\tif (isPlatformBrowser && request.hydrate && TransferService.has(stateKey)) {\r\n\t\t\tlet transfer: IHttpResponse<T> | undefined = TransferService.get<IHttpResponse<T>>(stateKey);\r\n\t\t\tif (transfer) {\r\n\t\t\t\tresponse = new HttpResponse<T>(transfer);\r\n\t\t\t}\r\n\t\t\t// console.log('HttpFetchHandler', cached);\r\n\t\t\tTransferService.remove(stateKey);\r\n\t\t}\r\n\t\t// hydrate\r\n\t\tif (response) {\r\n\t\t\treturn of(response);\r\n\t\t} else {\r\n\t\t\treturn from(\r\n\t\t\t\tfetch(requestInfo, requestInit)\r\n\t\t\t\t\t// fetch(fetchRequest)\r\n\t\t\t\t\t.then((response: Response) => this.getProgress<T>(response, request))\r\n\t\t\t\t\t.then((response: Response | HttpResponse<T>) => this.getResponse<T>(response, request))\r\n\t\t\t).pipe(\r\n\t\t\t\t// hydrate\r\n\t\t\t\ttap(response => {\r\n\t\t\t\t\t// console.log('HttpFetchHandler.set', 'isPlatformServer', isPlatformServer, 'hydrate', request.hydrate, response);\r\n\t\t\t\t\tif (isPlatformServer && request.hydrate) {\r\n\t\t\t\t\t\tTransferService.set(stateKey, response.toObject());\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\t// hydrate\r\n\t\t\t\tcatchError((error: Error) => {\r\n\t\t\t\t\tconst errorResponse: IHttpErrorResponse<T> = { error };\r\n\t\t\t\t\tif (this.response_) {\r\n\t\t\t\t\t\terrorResponse.headers = this.response_.headers;\r\n\t\t\t\t\t\terrorResponse.status = this.response_.status;\r\n\t\t\t\t\t\terrorResponse.statusText = this.response_.statusText;\r\n\t\t\t\t\t\terrorResponse.url = this.response_.url;\r\n\t\t\t\t\t\terrorResponse.request = request;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst httpErrorResponse = new HttpErrorResponse<T>(errorResponse);\r\n\t\t\t\t\t// console.log('httpErrorResponse', httpErrorResponse);\r\n\t\t\t\t\tnextError$.next(httpErrorResponse);\r\n\t\t\t\t\treturn of(this.response_) as Observable<any>;\r\n\t\t\t\t\t// return throwError(httpErrorResponse);\r\n\t\t\t\t}),\r\n\t\t\t\tfinalize(() => {\r\n\t\t\t\t\tthis.response_ = null;\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tgetProgress<T>(response: Response, request: HttpRequest<any>): Promise<Response | HttpResponse<T>> {\r\n\t\t// console.log('HttpFetchHandler.setProgress', request.reportProgress, response.body);\r\n\t\tconst clonedBody = response.clone().body;\r\n\t\tif (isPlatformBrowser && request.reportProgress && clonedBody) {\r\n\t\t\tconst reader: ReadableStreamDefaultReader<Uint8Array> = clonedBody.getReader();\r\n\t\t\tconst contentLength = response.headers && response.headers.has('Content-Length') ? +(response.headers.get('Content-Length') || 0) : 0;\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t/*\r\n\t\t\t\tlet receivedLength = 0; // received that many bytes at the moment\r\n\t\t\t\tconst chunks: Uint8Array[] = []; // array of received binary chunks (comprises the body)\r\n\t\t\t\tconst getChunk = () => {\r\n\t\t\t\t\treturn reader.read().then(({ done, value }) => {\r\n\t\t\t\t\t\tif (!done) {\r\n\t\t\t\t\t\t\tif (value) {\r\n\t\t\t\t\t\t\t\tchunks.push(value);\r\n\t\t\t\t\t\t\t\treceivedLength += value.length || 0;\r\n\t\t\t\t\t\t\t\tconsole.log(`HttpFetchHandler.setProgress ${(receivedLength / contentLength * 100).toFixed(2)}% ${receivedLength} of ${contentLength}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tgetChunk();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treader.cancel();\r\n\t\t\t\t\t\t\tresolve(response);\r\n\t\t\t\t\t\t\tif (false) {\r\n\t\t\t\t\t\t\t\t// Step 4: concatenate chunks into single Uint8Array\r\n\t\t\t\t\t\t\t\tconst chunksAll = new Uint8Array(receivedLength); // (4.1)\r\n\t\t\t\t\t\t\t\tlet position = 0;\r\n\t\t\t\t\t\t\t\tfor (let chunk of chunks) {\r\n\t\t\t\t\t\t\t\t\tchunksAll.set(chunk, position); // (4.2)\r\n\t\t\t\t\t\t\t\t\tposition += chunk.length;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Step 5: decode into a string\r\n\t\t\t\t\t\t\t\tconst result = new TextDecoder(\"utf-8\").decode(chunksAll);\r\n\t\t\t\t\t\t\t\t// We're done!\r\n\t\t\t\t\t\t\t\tconst data = JSON.parse(result);\r\n\t\t\t\t\t\t\t\tconsole.log('HttpFetchHandler.setProgress data', data);\r\n\t\t\t\t\t\t\t\tresolve(response);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).catch(error => {\r\n\t\t\t\t\t\treader.cancel();\r\n\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\t\t\t\tgetChunk();\r\n\t\t\t\t*/\r\n\t\t\t\tconst progress = { progress: 0, percent: 0, current: 0, total: 0 };\r\n\t\t\t\tconst onProgress = (value: Uint8Array | undefined, done: boolean): Promise<any> => {\r\n\t\t\t\t\tlet receivedLength = progress.current;\r\n\t\t\t\t\tif (!done) {\r\n\t\t\t\t\t\tif (value) {\r\n\t\t\t\t\t\t\treceivedLength += value.length || 0;\r\n\t\t\t\t\t\t\tprogress.total = contentLength;\r\n\t\t\t\t\t\t\tprogress.current = receivedLength;\r\n\t\t\t\t\t\t\tprogress.progress = receivedLength / contentLength;\r\n\t\t\t\t\t\t\tprogress.percent = progress.progress * 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log('progress', progress);\r\n\t\t\t\t\t\treturn reader.read().then(({ value, done }) => onProgress(value, done));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tprogress.total = contentLength;\r\n\t\t\t\t\t\tprogress.current = contentLength;\r\n\t\t\t\t\t\tprogress.progress = 1;\r\n\t\t\t\t\t\tprogress.percent = 100;\r\n\t\t\t\t\t\t// console.log('progress', progress);\r\n\t\t\t\t\t\treturn reader.closed.then(() => response.clone());\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\treader.read()\r\n\t\t\t\t\t.then(({ value, done }) => onProgress(value, done))\r\n\t\t\t\t\t.then(response => {\r\n\t\t\t\t\t\tthis.response_ = new HttpResponse<T>(response as unknown as IHttpResponse<T>);\r\n\t\t\t\t\t\tif (typeof (response as any)[request.responseType] === 'function') {\r\n\t\t\t\t\t\t\treturn (response as any)[request.responseType]().then((json: any) => {\r\n\t\t\t\t\t\t\t\tthis.response_ = new HttpResponse<T>(Object.assign(this.response_, { body: json }) as IHttpResponse<T>);\r\n\t\t\t\t\t\t\t\tif (response.ok) {\r\n\t\t\t\t\t\t\t\t\treturn resolve(this.response_);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn reject(this.response_);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn reject(this.response_);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(err => console.log(\"upload error:\", err));\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn Promise.resolve(response);\r\n\t\t}\r\n\t}\r\n\r\n\tgetResponse<T>(response: Response | HttpResponse<T>, request: HttpRequest<any>): Promise<HttpResponse<T>> {\r\n\t\tthis.response_ = new HttpResponse<T>(response as IHttpResponse<T>);\r\n\t\tif (isPlatformBrowser && request.reportProgress && response.body) {\r\n\t\t\treturn Promise.resolve(this.response_);\r\n\t\t} else {\r\n\t\t\treturn this.getResponseType(response as Response, request);\r\n\t\t}\r\n\t}\r\n\r\n\tgetResponseType<T>(response: Response, request: HttpRequest<any>): Promise<HttpResponse<T>> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.response_ = new HttpResponse<T>(response as unknown as IHttpResponse<T>);\r\n\t\t\tif (typeof (response as any)[request.responseType] === 'function') {\r\n\t\t\t\treturn (response as any)[request.responseType]().then((json: any) => {\r\n\t\t\t\t\tthis.response_ = new HttpResponse<T>(Object.assign(this.response_, { body: json }) as IHttpResponse<T>);\r\n\t\t\t\t\tif (response.ok) {\r\n\t\t\t\t\t\treturn resolve(this.response_);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn reject(this.response_);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\treturn reject(this.response_);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetReadableStream<T>(response: Response, request: HttpRequest<any>): ReadableStream {\r\n\t\tconst reader = response.body!.getReader();\r\n\t\tconst readableStream = new ReadableStream({\r\n\t\t\tstart(controller) {\r\n\t\t\t\t// console.log(\"starting upload, request.bodyUsed:\", request.bodyUsed);\r\n\t\t\t\t// controller.enqueue(request.bodyUsed);\r\n\t\t\t\t// The following function handles each data chunk\r\n\t\t\t\tconst push = function () {\r\n\t\t\t\t\t// \"done\" is a Boolean and value a \"Uint8Array\"\r\n\t\t\t\t\treader.read().then(({ done, value }) => {\r\n\t\t\t\t\t\t// Is there no more data to read?\r\n\t\t\t\t\t\tif (done) {\r\n\t\t\t\t\t\t\t// Tell the browser that we have finished sending data\r\n\t\t\t\t\t\t\tcontroller.close();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Get the data and send it to the browser via the controller\r\n\t\t\t\t\t\tcontroller.enqueue(value);\r\n\t\t\t\t\t\tpush();\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\t\t\t\tpush();\r\n\t\t\t},\r\n\t\t\t/*\r\n\t\t\tpull(controller) {\r\n\t\t\t\tif (request.bodyUsed) {\r\n\t\t\t\t\tcontroller.close();\r\n\t\t\t\t}\r\n\t\t\t\tcontroller.enqueue(request.bodyUsed);\r\n\t\t\t\tconsole.log(\"pull, request.bodyUsed:\", request.bodyUsed);\r\n\t\t\t},\r\n\t\t\tcancel(reason) {\r\n\t\t\t\tconsole.log(reason);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t});\r\n\t\treturn readableStream;\r\n\t}\r\n\r\n\t/*\r\n\tonProgress(value: Uint8Array, done: boolean, request, reader, progress) {\r\n\t\tconsole.log(\"value:\", value);\r\n\t\tif (value || done) {\r\n\t\t\tconsole.log(\"upload complete, request.bodyUsed:\", request.bodyUsed);\r\n\t\t\tprogress.value = progress.max;\r\n\t\t\treturn reader.closed.then(() => fileUpload);\r\n\t\t};\r\n\t\tconsole.log(\"upload progress:\", value);\r\n\t\tif (progress.value < file.size) {\r\n\t\t\tprogress.value += 1;\r\n\t\t}\r\n\t\treturn reader.read().then(({ value, done }) => this.onProgress(value, done, request, reader, progress));\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tgetProgress_(request) {\r\n\t\tconst uploadProgress = new ReadableStream({\r\n\t\t\tstart(controller) {\r\n\t\t\t\tconsole.log(\"starting upload, request.bodyUsed:\", request.bodyUsed);\r\n\t\t\t\tcontroller.enqueue(request.bodyUsed);\r\n\t\t\t},\r\n\t\t\tpull(controller) {\r\n\t\t\t\tif (request.bodyUsed) {\r\n\t\t\t\t\tcontroller.close();\r\n\t\t\t\t}\r\n\t\t\t\tcontroller.enqueue(request.bodyUsed);\r\n\t\t\t\tconsole.log(\"pull, request.bodyUsed:\", request.bodyUsed);\r\n\t\t\t},\r\n\t\t\tcancel(reason) {\r\n\t\t\t\tconsole.log(reason);\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst [fileUpload, reader] = [\r\n\t\t\tupload(request).catch(e => {\r\n\t\t\t\treader.cancel();\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\tthrow e\r\n\t\t\t}), uploadProgress.getReader()\r\n\t\t];\r\n\t}\r\n\t*/\r\n\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpFetchHandler } from './http-fetch.handler';\r\nimport { HttpHandler } from './http-handler';\r\nimport { HttpRequest } from './http-request';\r\nimport { HttpEvent } from './http-response';\r\nimport { HttpXhrHandler } from './http-xhr.handler';\r\n\r\nexport interface IHttpInterceptorConstructor {\r\n\tnew(): IHttpInterceptor;\r\n}\r\nexport interface IHttpInterceptor {\r\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\r\n}\r\nexport class HttpInterceptorHandler implements HttpHandler {\r\n\tconstructor(private next: HttpHandler, private interceptor: IHttpInterceptor) { }\r\n\thandle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\r\n\t\treturn this.interceptor.intercept(req, this.next);\r\n\t}\r\n}\r\nexport const HttpInterceptors: IHttpInterceptor[] = [];\r\nexport class NoopInterceptor implements IHttpInterceptor {\r\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\t\treturn next.handle(req);\r\n\t}\r\n}\r\nexport const fetchHandler: HttpHandler = new HttpFetchHandler();\r\nexport const xhrHandler: HttpHandler = new HttpXhrHandler();\r\nexport class HttpInterceptingHandler implements HttpHandler {\r\n\tprivate chain: HttpHandler | null = null;\r\n\thandle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\r\n\t\tif (this.chain === null) {\r\n\t\t\tconst interceptors = HttpInterceptors;\r\n\t\t\tthis.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), fetchHandler);\r\n\t\t}\r\n\t\treturn this.chain.handle(req);\r\n\t}\r\n}\r\nexport function interceptingHandler(handler: HttpHandler, interceptors: IHttpInterceptor[] | null = []): HttpHandler {\r\n\tif (!interceptors) {\r\n\t\treturn handler;\r\n\t}\r\n\treturn interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), handler);\r\n}\r\nexport function jsonpCallbackContext(): Object {\r\n\tif (typeof window === 'object') {\r\n\t\treturn window;\r\n\t}\r\n\treturn {};\r\n}\r\n","import { Factory, IModuleMeta, Module, Pipe } from 'rxcomp';\nimport { HttpInterceptors, IHttpInterceptor, IHttpInterceptorConstructor } from './http/http-interceptor';\n\nconst factories: typeof Factory[] = [\n];\n\nconst pipes: typeof Pipe[] = [\n];\n\n/**\n *  HttpModule Class.\n * @example\n * export default class AppModule extends Module {}\n *\n * AppModule.meta = {\n *  imports: [\n *   CoreModule,\n *    HttpModule\n *  ],\n *  declarations: [\n *   ErrorsComponent\n *  ],\n *  bootstrap: AppComponent,\n * };\n * @extends Module\n */\nexport default class HttpModule extends Module {\n\tstatic meta: IModuleMeta = {\n\t\tdeclarations: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t],\n\t\texports: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t]\n\t};\n\tstatic useInterceptors(interceptorFactories?: IHttpInterceptorConstructor[]): typeof HttpModule {\n\t\tif (interceptorFactories?.length) {\n\t\t\tconst interceptors: IHttpInterceptor[] = interceptorFactories?.map(x => new x());\n\t\t\tHttpInterceptors.push.apply(HttpInterceptors, interceptors);\n\t\t}\n\t\treturn this;\n\t}\n}\n","\r\nexport interface IHttpParamEncoder {\r\n\tencodeKey(key: string): string;\r\n\tencodeValue(value: string): string;\r\n\tdecodeKey(key: string): string;\r\n\tdecodeValue(value: string): string;\r\n}\r\n\r\nexport class HttpUrlEncodingCodec implements IHttpParamEncoder {\r\n\tencodeKey(key: string): string {\r\n\t\treturn encodeParam_(key);\r\n\t}\r\n\tencodeValue(value: string): string {\r\n\t\treturn encodeParam_(value);\r\n\t}\r\n\tdecodeKey(key: string): string {\r\n\t\treturn decodeURIComponent(key);\r\n\t}\r\n\tdecodeValue(value: string) {\r\n\t\treturn decodeURIComponent(value);\r\n\t}\r\n}\r\n\r\nexport class HttpParams {\r\n\tprivate params_: Map<string, string[]> = new Map<string, string[]>();\r\n\tprivate encoder: IHttpParamEncoder;\r\n\r\n\tconstructor(options?: HttpParams | { [key: string]: any } | string | undefined, encoder: IHttpParamEncoder = new HttpUrlEncodingCodec()) {\r\n\t\tthis.encoder = encoder;\r\n\t\tconst params = this.params_;\r\n\t\tif (options instanceof HttpParams) {\r\n\t\t\toptions.params_.forEach((value, key) => {\r\n\t\t\t\tparams.set(key, value);\r\n\t\t\t});\r\n\t\t} else if (typeof options === 'object') {\r\n\t\t\tObject.keys(options).forEach(key => {\r\n\t\t\t\tconst value = options[key];\r\n\t\t\t\tparams.set(key, Array.isArray(value) ? value : [value]);\r\n\t\t\t});\r\n\t\t} else if (typeof options === 'string') {\r\n\t\t\tparseRawParams_(params, options, this.encoder);\r\n\t\t}\r\n\t\t// ?updates=null&cloneFrom=null&encoder=%5Bobject%20Object%5D&params_=%5Bobject%20Map%5D\r\n\t}\r\n\r\n\tkeys(): string[] {\r\n\t\treturn Array.from(this.params_.keys());\r\n\t}\r\n\r\n\thas(key: string): boolean {\r\n\t\treturn this.params_.has(key);\r\n\t}\r\n\r\n\tget(key: string): string | null {\r\n\t\tconst value = this.params_.get(key);\r\n\t\treturn value ? value[0] : null;\r\n\t}\r\n\r\n\tgetAll(key: string): string[] | null {\r\n\t\treturn this.params_.get(key) || null;\r\n\t}\r\n\r\n\tset(key: string, value: string): HttpParams {\r\n\t\tconst clone = this.clone_();\r\n\t\tclone.params_.set(key, [value]);\r\n\t\treturn clone;\r\n\t}\r\n\r\n\tappend(key: string, value: string): HttpParams {\r\n\t\tconst clone = this.clone_();\r\n\t\tif (clone.has(key)) {\r\n\t\t\tconst values = clone.params_.get(key) || [];\r\n\t\t\tvalues.push(value);\r\n\t\t\tclone.params_.set(key, values);\r\n\t\t} else {\r\n\t\t\tclone.params_.set(key, [value]);\r\n\t\t}\r\n\t\treturn clone;\r\n\t}\r\n\r\n\tdelete(key: string): HttpParams {\r\n\t\tconst clone = this.clone_();\r\n\t\tclone.params_.delete(key);\r\n\t\treturn clone;\r\n\t}\r\n\r\n\ttoString(): string {\r\n\t\treturn this.keys().map((key: string) => {\r\n\t\t\tconst values = this.params_.get(key);\r\n\t\t\treturn this.encoder.encodeKey(key) + (values ? '=' + values.map(x => this.encoder.encodeValue(x)).join('&') : '');\r\n\t\t}).filter(keyValue => keyValue !== '').join('&');\r\n\t}\r\n\r\n\ttoObject(): { [keys: string]: any } {\r\n\t\tlet params: { [keys: string]: any } = {};\r\n\t\tthis.keys().map((key: string) => {\r\n\t\t\tconst values = this.params_.get(key);\r\n\t\t\tif (values) {\r\n\t\t\t\tparams[key] = values;\r\n\t\t\t}\r\n\t\t\t// return this.encoder.encodeKey(key) + (values ? '=' + values.map(x => this.encoder.encodeValue(x)).join('&') : '');\r\n\t\t});\r\n\t\treturn params;\r\n\t}\r\n\r\n\tprivate clone_(): HttpParams {\r\n\t\tconst clone = new HttpParams(undefined, this.encoder);\r\n\t\tthis.params_.forEach((value, key) => {\r\n\t\t\tclone.params_.set(key, value);\r\n\t\t});\r\n\t\treturn clone;\r\n\t}\r\n}\r\n\r\nfunction parseRawParams_(params: Map<string, string[]>, queryString: string, encoder: IHttpParamEncoder): Map<string, string[]> {\r\n\tif (queryString.length > 0) {\r\n\t\tconst keyValueParams: string[] = queryString.split('&');\r\n\t\tkeyValueParams.forEach((keyValue: string) => {\r\n\t\t\tconst index = keyValue.indexOf('=');\r\n\t\t\tconst [key, value]: string[] = index == -1 ? [encoder.decodeKey(keyValue), ''] : [encoder.decodeKey(keyValue.slice(0, index)), encoder.decodeValue(keyValue.slice(index + 1))];\r\n\t\t\tconst values = params.get(key) || [];\r\n\t\t\tvalues.push(value);\r\n\t\t\tparams.set(key, values);\r\n\t\t});\r\n\t}\r\n\treturn params;\r\n}\r\n\r\nfunction encodeParam_(v: string): string {\r\n\treturn encodeURIComponent(v)\r\n\t\t.replace(/%40/gi, '@')\r\n\t\t.replace(/%3A/gi, ':')\r\n\t\t.replace(/%24/gi, '$')\r\n\t\t.replace(/%2C/gi, ',')\r\n\t\t.replace(/%3B/gi, ';')\r\n\t\t.replace(/%2B/gi, '+')\r\n\t\t.replace(/%3D/gi, '=')\r\n\t\t.replace(/%3F/gi, '?')\r\n\t\t.replace(/%2F/gi, '/');\r\n}\r\n","import { getLocationComponents, optionsToKey } from 'rxcomp';\r\nimport { HttpHeaders } from './http-headers';\r\nimport { HttpParams } from './http-params';\r\n\r\nexport type HttpMethodType = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'JSONP';\r\nexport type HttpMethodBodyType = 'POST' | 'PUT' | 'PATCH';\r\nexport type HttpMethodNoBodyType = 'GET' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'JSONP';\r\nexport type HttpResponseType = 'arraybuffer' | 'blob' | 'json' | 'text';\r\nexport type HttpBodyType<T> = T | string | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams | ReadableStream<Uint8Array> | null | undefined;\r\nexport type HttpObserveType = 'body' | 'events' | 'response';\r\n\r\nexport interface IHttpRequestInit<T> {\r\n\theaders?: HttpHeaders | Headers | { [key: string]: string | string[] } | string | undefined;\r\n\treportProgress?: boolean;\r\n\tparams?: HttpParams | { [key: string]: any } | string | undefined;\r\n\tresponseType?: HttpResponseType;\r\n\twithCredentials?: boolean;\r\n\thydrate?: boolean;\r\n\tobserve?: HttpObserveType;\r\n\tbody?: HttpBodyType<T>;\r\n}\r\n\r\nexport interface IHttpRequest<T> extends IHttpRequestInit<T> {\r\n\tmethod?: HttpMethodType,\r\n\turl?: string,\r\n}\r\n\r\nexport class HttpRequest<T> {\r\n\treadonly body: HttpBodyType<T>;\r\n\treadonly headers!: HttpHeaders;\r\n\treadonly reportProgress: boolean = false;\r\n\treadonly withCredentials: boolean = false;\r\n\treadonly hydrate: boolean = true;\r\n\treadonly observe: HttpObserveType = 'body';\r\n\treadonly responseType: HttpResponseType = 'json';\r\n\treadonly method: HttpMethodType;\r\n\treadonly params!: HttpParams;\r\n\treadonly urlWithParams: string;\r\n\tget transferKey(): string {\r\n\t\tconst pathname: string = getLocationComponents(this.url).pathname;\r\n\t\tconst paramsKey: string = optionsToKey(this.params.toObject());\r\n\t\tconst bodyKey: string = optionsToKey(this.body);\r\n\t\tlet key: string = `${this.method}-${pathname}-${paramsKey}-${bodyKey}`;\r\n\t\tkey = key.replace(/(\\s+)|(\\W+)/g, function (...matches) { return matches[1] ? '' : '_' });\r\n\t\tconsole.log('transferKey', key);\r\n\t\treturn key;\r\n\t}\r\n\tconstructor(method: HttpMethodNoBodyType, url: string, options?: IHttpRequestInit<T>);\r\n\tconstructor(method: HttpMethodBodyType, url: string, body: HttpBodyType<T>, options?: IHttpRequestInit<T>);\r\n\tconstructor(method: HttpMethodType, url: string, body: HttpBodyType<T>, options?: IHttpRequestInit<T>);\r\n\tconstructor(method: HttpMethodType, readonly url: string, third?: HttpBodyType<T> | IHttpRequestInit<T> | null, fourth?: IHttpRequestInit<T>) {\r\n\t\t// !!! remove, rethink\r\n\t\tconst isStaticFile: boolean = /\\.(json|xml|txt)(\\?.*)?$/.test(url);\r\n\t\tthis.method = isStaticFile ? 'GET' : method.toUpperCase() as HttpMethodType;\r\n\t\tlet options: IHttpRequestInit<T> | undefined;\r\n\t\tif (methodHasBody_(this.method) || !!fourth) {\r\n\t\t\tthis.body = (third !== undefined) ? third as HttpBodyType<T> : null;\r\n\t\t\toptions = fourth;\r\n\t\t} else {\r\n\t\t\toptions = third as IHttpRequestInit<T>;\r\n\t\t}\r\n\t\tif (options) {\r\n\t\t\tthis.reportProgress = !!options.reportProgress;\r\n\t\t\tthis.withCredentials = !!options.withCredentials;\r\n\t\t\tthis.observe = options.observe || this.observe;\r\n\t\t\tif (options.responseType) {\r\n\t\t\t\tthis.responseType = options.responseType;\r\n\t\t\t}\r\n\t\t\tif (options.headers) {\r\n\t\t\t\tthis.headers = new HttpHeaders(options.headers);\r\n\t\t\t}\r\n\t\t\tif (options.params) {\r\n\t\t\t\tthis.params = new HttpParams(options.params);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!this.headers) {\r\n\t\t\tthis.headers = new HttpHeaders();\r\n\t\t}\r\n\t\tif (!this.params) {\r\n\t\t\tthis.params = new HttpParams();\r\n\t\t}\r\n\t\tconst params = this.params.toString();\r\n\t\tconst index = url.indexOf('?');\r\n\t\tconst sep: string = index === -1 ? '?' : (index < url.length - 1 ? '&' : '');\r\n\t\tthis.urlWithParams = url + (params.length ? sep + params : params);\r\n\t}\r\n\tserializeBody(): ArrayBuffer | Blob | FormData | string | null {\r\n\t\tif (this.body === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (isArrayBuffer_(this.body) || isBlob_(this.body) || isFormData_(this.body) ||\r\n\t\t\ttypeof this.body === 'string') {\r\n\t\t\treturn this.body;\r\n\t\t}\r\n\t\tif (this.body instanceof HttpParams) {\r\n\t\t\treturn (<any>this.body).toString();\r\n\t\t}\r\n\t\tif (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\r\n\t\t\treturn JSON.stringify(this.body);\r\n\t\t}\r\n\t\treturn (this.body as any).toString();\r\n\t}\r\n\tdetectContentTypeHeader(): string | null {\r\n\t\tif (this.body === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (isFormData_(this.body)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (isBlob_(this.body)) {\r\n\t\t\treturn this.body.type || null;\r\n\t\t}\r\n\t\tif (isArrayBuffer_(this.body)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (typeof this.body === 'string') {\r\n\t\t\treturn 'text/plain';\r\n\t\t}\r\n\t\tif (this.body instanceof HttpParams) {\r\n\t\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\r\n\t\t}\r\n\t\tif (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n\t\t\tArray.isArray(this.body)) {\r\n\t\t\treturn 'application/json';\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\ttoInitRequest(): RequestInit {\r\n\t\treturn {\r\n\t\t\tmethod: this.method,\r\n\t\t\theaders: this.headers.serialize(),\r\n\t\t\tbody: this.serializeBody(),\r\n\t\t\tmode: 'same-origin', // 'cors' | 'navigate' | 'no-cors' | 'same-origin',\r\n\t\t\tcredentials: 'same-origin',\r\n\t\t\tcache: 'default', // 'default' | 'force-cache' | 'no-cache' | 'no-store' | 'only-if-cached' | 'reload',\r\n\t\t\tredirect: 'error', // 'error' | 'follow' | 'manual';\r\n\t\t\t// referrer: '',\r\n\t\t\t// integrity: '',\r\n\t\t\t// keepalive: false,\r\n\t\t\t// referrerPolicy: ''; // '' | 'no-referrer' | 'no-referrer-when-downgrade' | 'origin' | 'origin-when-cross-origin' | 'same-origin' | 'strict-origin' | 'strict-origin-when-cross-origin' | 'unsafe-url',\r\n\t\t\t// signal: null,\r\n\t\t\t// window,\r\n\t\t\t// method: The request method, e.g., GET, POST. The default is GET.\r\n\t\t\t// headers: Any headers you want to add to your request, contained within a Headers object or an object literal with ByteString values.\r\n\t\t\t// body: Any body that you want to add to your request: this can be a Blob, BufferSource, FormData, URLSearchParams, USVString, or ReadableStream object. Note that a request using the GET or HEAD method cannot have a body.\r\n\t\t\t// mode: The mode you want to use for the request, e.g., cors, no-cors, same-origin, or navigate. The default is cors.\r\n\t\t\t// credentials: The request credentials you want to use for the request: omit, same-origin, or include. The default is same-origin.\r\n\t\t\t// cache: The cache mode you want to use for the request.\r\n\t\t\t// redirect: The redirect mode to use: follow, error, or manual. The default is follow.\r\n\t\t\t// referrer: A USVString specifying no-referrer, client, or a URL. The default is about:client.\r\n\t\t\t// integrity: Contains the subresource integrity value of the request (e.g., sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=).\r\n\t\t}\r\n\t}\r\n\ttoFetchRequest__(): Request {\r\n\t\treturn new Request(this.urlWithParams, this.toInitRequest());\r\n\t\t/*\r\n\t\tRequest.cache Read only\r\n\t\tContains the cache mode of the request (e.g., default, reload, no-cache).\r\n\t\tRequest.context Read only\r\n\t\tContains the context of the request (e.g., audio, image, iframe, etc.)\r\n\t\tRequest.credentials Read only\r\n\t\tContains the credentials of the request (e.g., omit, same-origin, include). The default is same-origin.\r\n\t\tRequest.destination Read only\r\n\t\tReturns a string from the RequestDestination enum describing the request's destination. This is a string indicating the type of content being requested.\r\n\t\tRequest.headers Read only\r\n\t\tContains the associated Headers object of the request.\r\n\t\tRequest.integrity Read only\r\n\t\tContains the subresource integrity value of the request (e.g., sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=).\r\n\t\tRequest.method Read only\r\n\t\tContains the request's method (GET, POST, etc.)\r\n\t\tRequest.mode Read only\r\n\t\tContains the mode of the request (e.g., cors, no-cors, same-origin, navigate.)\r\n\t\tRequest.redirect Read only\r\n\t\tContains the mode for how redirects are handled. It may be one of follow, error, or manual.\r\n\t\tRequest.referrer Read only\r\n\t\tContains the referrer of the request (e.g., client).\r\n\t\tRequest.referrerPolicy Read only\r\n\t\tContains the referrer policy of the request (e.g., no-referrer).\r\n\t\tRequest.url Read only\r\n\t\tContains the URL of the request.\r\n\t\tRequest implements Body, so it also inherits the following properties:\r\n\t\tbody Read only\r\n\t\tA simple getter used to expose a ReadableStream of the body contents.\r\n\t\tbodyUsed Read only\r\n\t\tStores a Boolean that declares whether the body has been used in a response yet.\r\n\t\t*/\r\n\t}\r\n\tclone<T>(options?: IHttpRequest<T>): HttpRequest<T> {\r\n\t\toptions = Object.assign({\r\n\t\t\theaders: this.headers,\r\n\t\t\treportProgress: this.reportProgress,\r\n\t\t\tparams: this.params,\r\n\t\t\tresponseType: this.responseType,\r\n\t\t\twithCredentials: this.withCredentials,\r\n\t\t\tobserve: this.observe,\r\n\t\t\tbody: this.body,\r\n\t\t\turl: this.url,\r\n\t\t\tmethod: this.method,\r\n\t\t}, options || {}) as IHttpRequestInit<T>;\r\n\t\tconst clone = new HttpRequest<T>(this.method as HttpMethodBodyType, this.url, this.body as HttpBodyType<T>, options);\r\n\t\treturn clone;\r\n\t}\r\n\ttoObject(): { [key: string]: any } {\r\n\t\tconst request: { [key: string]: any } = {};\r\n\t\trequest.url = this.url;\r\n\t\trequest.method = this.method;\r\n\t\trequest.headers = this.headers.toObject();\r\n\t\trequest.params = this.params.toObject();\r\n\t\trequest.body = this.body;\r\n\t\trequest.reportProgress = this.reportProgress;\r\n\t\trequest.responseType = this.responseType;\r\n\t\trequest.withCredentials = this.withCredentials;\r\n\t\trequest.observe = this.observe;\r\n\t\treturn request;\r\n\t}\r\n}\r\n\r\nfunction methodHasBody_(method: string): boolean {\r\n\tswitch (method) {\r\n\t\tcase 'DELETE':\r\n\t\tcase 'GET':\r\n\t\tcase 'HEAD':\r\n\t\tcase 'OPTIONS':\r\n\t\tcase 'JSONP':\r\n\t\t\treturn false;\r\n\t\tdefault:\r\n\t\t\treturn true;\r\n\t}\r\n}\r\n\r\nfunction isArrayBuffer_(value: any): value is ArrayBuffer {\r\n\treturn typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n\r\nfunction isBlob_(value: any): value is Blob {\r\n\treturn typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n\r\nfunction isFormData_(value: any): value is FormData {\r\n\treturn typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n","import { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { catchError, concatMap, filter, finalize, map } from 'rxjs/operators';\nimport { HttpErrorResponse, IHttpErrorResponse } from './http-error-response';\nimport { HttpHeaders } from './http-headers';\nimport { HttpInterceptingHandler } from './http-interceptor';\nimport { HttpParams } from './http-params';\nimport { HttpBodyType, HttpMethodType, HttpRequest, IHttpRequestInit } from './http-request';\nimport { HttpEvent, HttpResponse } from './http-response';\n\nexport default class HttpService {\n\n\tstatic pendingRequests$: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n\n\tstatic incrementPendingRequest() {\n\t\tHttpService.pendingRequests$.next(HttpService.pendingRequests$.getValue() + 1);\n\t}\n\n\tstatic decrementPendingRequest() {\n\t\tHttpService.pendingRequests$.next(HttpService.pendingRequests$.getValue() - 1);\n\t}\n\n\t// static handler: HttpHandler = new HttpFetchHandler();\n\tstatic handler: HttpInterceptingHandler = new HttpInterceptingHandler();\n\n\tstatic request$<T>(first: HttpMethodType | HttpRequest<T>, url?: string, options: IHttpRequestInit<T> = {}): Observable<HttpEvent<any> | HttpResponse<T> | HttpBodyType<T>> {\n\t\tlet request: HttpRequest<T>;\n\t\tif (first instanceof HttpRequest) {\n\t\t\trequest = first;\n\t\t} else {\n\t\t\tlet headers: HttpHeaders | undefined = undefined;\n\t\t\tif (options.headers instanceof HttpHeaders) {\n\t\t\t\theaders = options.headers;\n\t\t\t} else {\n\t\t\t\theaders = new HttpHeaders(options.headers);\n\t\t\t}\n\t\t\tlet params: HttpParams | undefined = undefined;\n\t\t\tif (options.params) {\n\t\t\t\tparams = new HttpParams(options.params);\n\t\t\t}\n\t\t\trequest = new HttpRequest(first, url!, (options.body !== undefined ? options.body : null), {\n\t\t\t\theaders,\n\t\t\t\tparams,\n\t\t\t\treportProgress: options.reportProgress,\n\t\t\t\tresponseType: options.responseType || 'json',\n\t\t\t\twithCredentials: options.withCredentials,\n\t\t\t});\n\t\t}\n\t\t// console.log('HttpService.request$', request);\n\t\tHttpService.incrementPendingRequest();\n\t\tconst events$: Observable<HttpEvent<any>> = of(request).pipe(\n\t\t\tconcatMap((request: HttpRequest<T>) => this.handler.handle(request)),\n\t\t\t// tap((response: HttpEvent<any>) => console.log('HttpService.response', response)),\n\t\t\tfinalize(() => HttpService.decrementPendingRequest())\n\t\t);\n\t\tif (first instanceof HttpRequest || options.observe === 'events') {\n\t\t\treturn events$.pipe(\n\t\t\t\tcatchError(error => {\n\t\t\t\t\tconsole.log('error', error);\n\t\t\t\t\treturn throwError(this.getError(error, null, request));\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t\tconst response$: Observable<HttpResponse<T>> = <Observable<HttpResponse<T>>>events$.pipe(\n\t\t\tfilter((event: HttpEvent<any>) => event instanceof HttpResponse),\n\t\t);\n\t\tlet response_: HttpResponse<T>;\n\t\tconst observe$: Observable<HttpResponse<T> | HttpBodyType<T>> = response$.pipe(\n\t\t\tmap((response: HttpResponse<T>) => {\n\t\t\t\tresponse_ = response;\n\t\t\t\tswitch (options.observe || 'body') {\n\t\t\t\t\tcase 'body':\n\t\t\t\t\t\tswitch (request.responseType) {\n\t\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\t\t\tif (response.body !== null && !(response.body instanceof ArrayBuffer)) {\n\t\t\t\t\t\t\t\t\tthrow new Error('Response is not an ArrayBuffer.');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn response.body;\n\t\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\t\tif (response.body !== null && !(response.body instanceof Blob)) {\n\t\t\t\t\t\t\t\t\tthrow new Error('Response is not a Blob.');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn response.body;\n\t\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\t\tif (response.body !== null && typeof response.body !== 'string') {\n\t\t\t\t\t\t\t\t\tthrow new Error('Response is not a string.');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn response.body;\n\t\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn response.body;\n\t\t\t\t\t\t}\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\treturn response;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tcatchError(error => {\n\t\t\t\tconsole.log('error', error);\n\t\t\t\treturn throwError(this.getError(error, response_, request));\n\t\t\t}),\n\t\t)\n\t\treturn observe$;\n\t\t/*\n\t\tswitch (options.observe || 'body') {\n\t\t\tcase 'body':\n\t\t\t\tswitch (request.responseType) {\n\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\treturn response$.pipe(map((response: HttpResponse<T>) => {\n\t\t\t\t\t\t\tif (response.body !== null && !(response.body instanceof ArrayBuffer)) {\n\t\t\t\t\t\t\t\tthrow new Error('Response is not an ArrayBuffer.');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn response.body;\n\t\t\t\t\t\t}));\n\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\treturn response$.pipe(map((response: HttpResponse<T>) => {\n\t\t\t\t\t\t\tif (response.body !== null && !(response.body instanceof Blob)) {\n\t\t\t\t\t\t\t\tthrow new Error('Response is not a Blob.');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn response.body;\n\t\t\t\t\t\t}));\n\t\t\t\t\tcase 'text':\n\t\t\t\t\t\treturn response$.pipe(map((response: HttpResponse<T>) => {\n\t\t\t\t\t\t\tif (response.body !== null && typeof response.body !== 'string') {\n\t\t\t\t\t\t\t\tthrow new Error('Response is not a string.');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn response.body;\n\t\t\t\t\t\t}));\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn response$.pipe(map((response: HttpResponse<T>) => response.body));\n\t\t\t\t}\n\t\t\tcase 'response':\n\t\t\t\treturn response$;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n\t\t}\n\t\t*/\n\t}\n\n\tstatic delete$<T>(url: string, options?: IHttpRequestInit<T>): Observable<T>;\n\tstatic delete$<T>(url: string, options: IHttpRequestInit<T>): Observable<HttpEvent<any> | HttpResponse<T> | HttpBodyType<T>>;\n\tstatic delete$(url: string, options: IHttpRequestInit<any> = {}): Observable<HttpEvent<any> | HttpResponse<any> | HttpBodyType<any>> {\n\t\treturn this.request$<any>('DELETE', url, options);\n\t}\n\n\tstatic get$<T>(url: string, options?: IHttpRequestInit<T>): Observable<T>;\n\tstatic get$<T>(url: string, options: IHttpRequestInit<T>): Observable<HttpEvent<any> | HttpResponse<T> | HttpBodyType<T>>;\n\tstatic get$(url: string, options: IHttpRequestInit<any> = {}): Observable<HttpEvent<any> | HttpResponse<any> | HttpBodyType<any>> {\n\t\treturn this.request$<any>('GET', url, options);\n\t}\n\n\tstatic head$<T>(url: string, options?: IHttpRequestInit<T>): Observable<T>;\n\tstatic head$<T>(url: string, options: IHttpRequestInit<T>): Observable<HttpEvent<any> | HttpResponse<T> | HttpBodyType<T>>;\n\tstatic head$(url: string, options: IHttpRequestInit<any> = {}): Observable<HttpEvent<any> | HttpResponse<any> | HttpBodyType<any>> {\n\t\treturn this.request$<any>('HEAD', url, options);\n\t}\n\n\tstatic jsonp$<T>(url: string, callbackParam: string): Observable<T>;\n\tstatic jsonp$<T>(url: string, callbackParam: string): Observable<HttpEvent<any> | HttpResponse<T> | HttpBodyType<T>>;\n\tstatic jsonp$(url: string, callbackParam: string): Observable<HttpEvent<any> | HttpResponse<any> | HttpBodyType<any>> {\n\t\treturn this.request$<any>('JSONP', url, {\n\t\t\tparams: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n\t\t\tobserve: 'body',\n\t\t\tresponseType: 'json',\n\t\t});\n\t}\n\n\tstatic options$<T>(url: string, options?: IHttpRequestInit<T>): Observable<T>;\n\tstatic options$<T>(url: string, options: IHttpRequestInit<T>): Observable<HttpEvent<any> | HttpResponse<T> | HttpBodyType<T>>;\n\tstatic options$(url: string, options: IHttpRequestInit<any> = {}): Observable<HttpEvent<any> | HttpResponse<any> | HttpBodyType<any>> {\n\t\treturn this.request$<any>('OPTIONS', url, options);\n\t}\n\n\tstatic patch$<T>(url: string, body: any | null, options?: IHttpRequestInit<T>): Observable<T>;\n\tstatic patch$<T>(url: string, body: any | null, options: IHttpRequestInit<T>): Observable<HttpEvent<any> | HttpResponse<T> | HttpBodyType<T>>;\n\tstatic patch$(url: string, body: any | null, options: IHttpRequestInit<any> = {}): Observable<HttpEvent<any> | HttpResponse<any> | HttpBodyType<any>> {\n\t\treturn this.request$<any>('PATCH', url, optionsWithBody_<any>(options, body));\n\t}\n\n\tstatic post$<T>(url: string, body: any | null, options?: IHttpRequestInit<T>): Observable<T>;\n\tstatic post$<T>(url: string, body: any | null, options: IHttpRequestInit<T>): Observable<HttpEvent<any> | HttpResponse<T> | HttpBodyType<T>>;\n\tstatic post$(url: string, body: any | null, options: IHttpRequestInit<any> = {}): Observable<HttpEvent<any> | HttpResponse<any> | HttpBodyType<any>> {\n\t\treturn this.request$<any>('POST', url, optionsWithBody_<any>(options, body));\n\t}\n\n\tstatic put$<T>(url: string, body: any | null, options?: IHttpRequestInit<T>): Observable<T>;\n\tstatic put$<T>(url: string, body: any | null, options: IHttpRequestInit<T>): Observable<HttpEvent<any> | HttpResponse<T> | HttpBodyType<T>>;\n\tstatic put$(url: string, body: any | null, options: IHttpRequestInit<any> = {}): Observable<HttpEvent<any> | HttpResponse<any> | HttpBodyType<any>> {\n\t\treturn this.request$<any>('PUT', url, optionsWithBody_<any>(options, body));\n\t}\n\n\tstatic getError<T>(error: any, response: HttpResponse<T> | null, request: HttpRequest<T> | null): HttpErrorResponse<T> {\n\t\tif (!error.status) {\n\t\t\terror.statusCode = response?.status || 0;\n\t\t}\n\t\tif (!error.statusMessage) {\n\t\t\terror.statusMessage = response?.statusText || 'Unknown Error';\n\t\t}\n\t\tconst options: IHttpErrorResponse<T> = {\n\t\t\terror,\n\t\t\tstatus: error.status,\n\t\t\tstatusText: error.statusText,\n\t\t\tmessage: error.message,\n\t\t\trequest,\n\t\t};\n\t\tif (response) {\n\t\t\toptions.headers = response.headers;\n\t\t\toptions.status = options.status || response.status;\n\t\t\toptions.statusText = options.statusText || response.statusText;\n\t\t\toptions.url = response.url;\n\t\t}\n\t\treturn new HttpErrorResponse<T>(options);\n\t}\n\n}\n\nfunction optionsWithBody_<T>(options: IHttpRequestInit<T>, body: T | null): IHttpRequestInit<T> {\n\treturn Object.assign({}, options, { body });\n}\n","import { Component, errors$, getContext, IFactoryMeta } from 'rxcomp';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { HttpService } from '../../../src/rxcomp-http';\nimport { IResponseData, ITodoItem } from './todo/todo';\n\nexport default class AppComponent extends Component {\n\titems: ITodoItem[] = [];\n\terror: any = null;\n\n\tonInit() {\n\t\t// console.log('AppComponent.onInit', this);\n\t\tconst { node } = getContext(this);\n\t\tnode.classList.add('init');\n\t\t/*\n\t\tconst payload = { query: `{ hello }` };\n\t\t*/\n\t\t/*\n\t\tconst payload = { query: `{ roll(dices: ${3}, sides: ${6}) }` };\n\t\t*/\n\t\t/*\n\t\tconst payload = {\n\t\t\tquery: `query ($dices: Int!, $sides: Int) {\n\t\t\troll(dices: $dices, sides: $sides)\n\t\t}`, variables: { dices: 3, sides: 6 }\n\t\t};\n\t\t*/\n\t\t/*\n\t\tconst payload = { query: `{ getTodos { id, title, completed } }` };\n\t\t*/\n\t\t/*\n\t\tHttpService.post$<IResponseData>(`${Vars.host}${Vars.api}`, payload, {\n\t\t\tparams: { query: `{ getTodos { id, title, completed } }` },\n\t\t\treportProgress: true\n\t\t}).pipe(\n\t\t*/\n\t\t/*\n\t\tconst methodUrl: string = `${Vars.host}${Vars.api}`;\n\t\tHttpService.post$<IResponseData>(methodUrl, payload).pipe(\n\t\t\tfirst(),\n\t\t).subscribe((response: IResponseData) => {\n\t\t\tthis.items = response.data.getTodos;\n\t\t\tthis.pushChanges();\n\t\t\t// console.log('AppComponent.getTodos', this.items);\n\t\t}, error => console.log);\n\t\t*/\n\t\t/*\n\t\tHttpService.get$(`${Vars.host}/data/todos.json`).pipe(\n\t\t\tfirst(),\n\t\t).subscribe(response => {\n\t\t\t// console.log('AppComponent.items', response);\n\t\t\tthis.items = response.data;\n\t\t\tthis.pushChanges();\n\t\t});\n\t\t*/\n\t\tconst methodUrl: string = `/rxcomp-http/data/get-todos.json`;\n\t\tHttpService.get$<IResponseData>(methodUrl).pipe(\n\t\t\tfirst(),\n\t\t).subscribe((response: IResponseData) => {\n\t\t\tthis.items = response.data.getTodos;\n\t\t\tthis.pushChanges();\n\t\t\t// console.log('AppComponent.getTodos', this.items);\n\t\t}, error => console.log);\n\t\t// HttpService.get$(`https://jsonplaceholder.typicode.com/users/1/todos`).pipe(\n\t\terrors$.pipe(\n\t\t\ttakeUntil(this.unsubscribe$),\n\t\t).subscribe(error => {\n\t\t\tthis.error = error;\n\t\t\tthis.pushChanges();\n\t\t});\n\t}\n\n\tonClick(item: { title: string, completed: boolean }) {\n\t\titem.completed = !item.completed;\n\t\tthis.pushChanges();\n\t}\n\n\tstatic meta: IFactoryMeta = {\n\t\tselector: '[app-component]',\n\t};\n\n}\n","\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { HttpEvent, HttpHandler, HttpRequest, HttpResponse, IHttpInterceptor } from '../../../../src/rxcomp-http';\r\n\r\nconst cancelRequest: boolean = false;\r\n\r\nexport class CustomInterceptor implements IHttpInterceptor {\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (cancelRequest) {\r\n            return EMPTY;\r\n        }\r\n        const clonedRequest = request.clone({\r\n            url: request.url,\r\n        });\r\n        // console.log('CustomInterceptor.clonedRequest', clonedRequest);\r\n        return next.handle(clonedRequest);\r\n        return next.handle(request).pipe(\r\n            tap(event => {\r\n                if (event instanceof HttpResponse) {\r\n                    console.log('CustomInterceptor.status', event.status);\r\n                    console.log('CustomInterceptor.filter', request.params.get('filter'));\r\n                }\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { CoreModule, IModuleMeta, Module } from 'rxcomp';\r\nimport { HttpModule } from '../../../src/rxcomp-http';\r\nimport AppComponent from './app.component';\r\nimport { CustomInterceptor } from './http/custom.interceptor';\r\n\r\nexport default class AppModule extends Module {\r\n\r\n\tstatic meta: IModuleMeta = {\r\n\t\timports: [\r\n\t\t\tCoreModule,\r\n\t\t\tHttpModule.useInterceptors([CustomInterceptor]),\r\n\t\t],\r\n\t\tdeclarations: [\r\n\t\t],\r\n\t\tbootstrap: AppComponent,\r\n\t};\r\n\r\n}\r\n","import { Browser } from 'rxcomp';\r\nimport AppModule from './app.module';\r\n\r\nBrowser.bootstrap(AppModule);\r\n"]}